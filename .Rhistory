which.max(summary(orig_data$model))[1,]
## The most frequently observed one is:
id.top <- which.max(summary(orig_data$model))
class(id.top)
unique(orig_data$model)
orig_data <- orig_data %>% group_by(model)
orig_data <- orig_data %>% group_by(model) %>%
sort(model)
orig_data <- orig_data %>% group_by(model) %>%
sort(model)
orig_data <- orig_data %>% group_by(model) %>% arrange(aesc(model))
orig_data <- orig_data %>% group_by(model) %>% arrange(aes(model))
?desc
orig_data <- orig_data %>% group_by(model) %>% arrange(model)
View(orig_data)
unique(orig_data$model)
## The most frequently observed one is:
id.top <- which.max(summary(orig_data$model))
orig_data$model[id.top] ## with 30258 obs
unique(orig_data$model)[id.top] ## with 30258 obs
biddy_list <- sprintf("biddy%d",1:22)  ## vector with formatted combination of text and variable values
my.max <- function(x){
ifelse(!all(is.na(x)), max(x, na.rm=T), NA)
}  ## set my own max function to avoid '-INF'
biddy <- orig_data %>% select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
orig_data <- orig_data %>% full_join(biddy, by = biddy_list)
biddy <- orig_data %>% select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max))
# \Generate Winning bid
biddy_list <- sprintf("biddy%d",1:22)  ## vector with formatted combination of text and variable values
my.max <- function(x){
ifelse(!all(is.na(x)), max(x, na.rm=T), NA)
}  ## set my own max function to avoid '-INF'
biddy <- orig_data %>% select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max))
biddy <- orig_data %>% ungroup() %>%
select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max))
biddy <- orig_data %>% ungroup() %>%
select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
orig_data <- orig_data %>% full_join(biddy, by = biddy_list)
biddy <- cbind(biddy$winningbid,orig_data)
biddy <- orig_data %>% ungroup() %>%
select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- data.frame(biddy$winningbid,orig_data)
biddy$biddy.winningbid
View(biddy)
biddy <- orig_data %>% ungroup() %>%
select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy$winningbid
# \Generate Winning bid
biddy_list <- sprintf("biddy%d",1:22)  ## vector with formatted combination of text and variable values
my.max <- function(x){
ifelse(!all(is.na(x)), max(x, na.rm=T), NA)
}  ## set my own max function to avoid '-INF'
var <- colnames(orig_data)
orig_data$model <- factor(orig_data$model)
orig_data <- orig_data %>% group_by(model) %>% arrange(model)
# \Find the most frequently observed model
which.max(summary(orig_data$model))
## The most frequently observed one is:
id.top <- which.max(summary(orig_data$model))
unique(orig_data$model)[id.top] ## model 39 with 30258 obs
# \Generate Winning bid
biddy_list <- sprintf("biddy%d",1:22)  ## vector with formatted combination of text and variable values
my.max <- function(x){
ifelse(!all(is.na(x)), max(x, na.rm=T), NA)
}  ## set my own max function to avoid '-INF'
biddy <- orig_data %>% ungroup() %>%
select(biddy_list) %>%
mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy$winningbid
biddy <- orig_data %>% ungroup() %>%
select(biddy_list) %>%
mutate(winningbid=apply(biddy_list,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy_list,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- cbind(biddy$winningbid,orig_data)
biddy <- biddy %>% tibble(winningbid=biddy$winningbid,orig_data)
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
biddy <- orig_data %>% add_column(biddy$winningbid)
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- orig_data %>% add_column(biddy$winningbid)
biddy$winningbid
orig_data <- orig_data %>% add_column(winningbid)
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
orig_data <- orig_data %>% add_column(winningbid)
biddy <- orig_data %>% add_column(biddy$winningbid)
biddy$`biddy$winningbid`
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
biddy$winningbid
# \Gather predictors
biddy <- biddy %>% rm(biddy_list)
# \Gather predictors
biddy <- rm(biddy[biddy_list])
# \Gather predictors
biddy <- rm(biddy[biddy_list])
# \Gather predictors
biddy <- rm(biddy(biddy_list)
# \Gather predictors
biddy <- rm(biddy(biddy_list))
# \Gather predictors
biddy <- rm(biddy(biddy_list))
# \Gather predictors
biddy <- drop(biddy(biddy_list))
?drop
biddy[biddy_list]
biddy(biddy_list)
biddy[,biddy_list]
biddy[-biddy_list]
biddy[,-biddy_list]
biddy[,!names(biddy)%in%biddy_list]
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
glimpse(biddy)
biddy <- biddy[,!names(biddy) %in% biddy_list]
glimpse(biddy)
# \Gather predictors
predictors <- !var %in% biddy_list
predictors
# \Gather predictors
predictors <- var[!var %in% biddy_list]
predictors
time <- c("^biddate*","^bidhour*","^bidminute*","^bidsecond*")
time <- c("^biddate*","^bidhour*","^bidminute*","^bidsecond*")
predictors <- var[!var %in% time]  # remove bid time variables
# \Gather predictors
predictors <- var[!var %in% biddy_list]  # remove biddy1~biddy22
predictors <- predictors[!predictors %in% time]  # remove bid time variables
predictors
time
time <- c("^biddate*","^bidhour*","^bidminute*","^bidsecond*")
time_list <- c()
for (i in time){
vec <- colnames(orig_data)[grepl(i,colnames(orig_data))]
time_list <- append(time_list,vec)
}
predictors <- predictors[!predictors %in% time_list]
predictors
useless_list <- c('enddate','startdate')
predictors <- predictors[!predictors %in% useless_list]  # remove other useless variables
biddy$start_m
summary(biddy$start_m)
rm(list = ls())
source('0. Data cleaning.R')
var <- colnames(orig_data)
orig_data$model <- factor(orig_data$model)
orig_data <- orig_data %>% group_by(model) %>% arrange(model)
# \Find the most frequently observed model
which.max(summary(orig_data$model))
## The most frequently observed one is:
id.top <- which.max(summary(orig_data$model))
unique(orig_data$model)[id.top] ## model 39 with 30258 obs
# \Generate Winning bid
biddy_list <- sprintf("biddy%d",1:22)  ## vector with formatted combination of text and variable values
my.max <- function(x){
ifelse(!all(is.na(x)), max(x, na.rm=T), NA)
}  ## set my own max function to avoid '-INF'
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
biddy <- biddy[,!names(biddy) %in% biddy_list]
# \Gather predictors
predictors <- var[!var %in% biddy_list]  # remove biddy1~biddy22
time <- c("^biddate*","^bidhour*","^bidminute*","^bidsecond*")
time_list <- c()
for (i in time){
vec <- colnames(orig_data)[grepl(i,colnames(orig_data))]
time_list <- append(time_list,vec)
}
predictors <- predictors[!predictors %in% time_list]  # remove bid time variables
useless_list <- c('enddate','startdate')
predictors <- predictors[!predictors %in% useless_list]  # remove other useless variables
source('~/OneDrive - UW-Madison/GitHub/ilovepython/Econ-725-ML-project/0. Data cleaning.R')
summary(orig_data$start_m)
summary(factor(orig_data$start_m))
glimpse(biddy)
summary(biddy$peak_s)
summary(biddy$season_trans)
useless_list <- c('enddate','startdate',
'start_m','end_m','start_s','end_s','peak_s','season_trans')
predictors <- predictors[!predictors %in% useless_list]  # remove other useless variables
nndata <- biddy %>% select(predictors)
nndata <- subset(biddy, select=predictors)
glimpse(nndata)
unique(biddy$maker)
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:6)
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:7)
?factor
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:6, ifany(is.na(x)))
nndata <- subset(biddy, select=predictors)
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:6,exclude = NULL )
length(unique(biddy$maker))
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:7,exclude = NULL )
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(biddy$interior),labels=1:length(unique(biddy$interior)),exclude = NULL)
nndata$location <- factor(nndata$location,level=unique(biddy$location),labels=1:length(unique(biddy$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(biddy$software),labels=1:length(unique(biddy$software)),exclude = NULL)
nndata <- nndata %>% mutate_at(.vars = c('maker','interior','location','software'), .funs = factor,
level=unique(.vars),labels=1:length(unique(.vars)),exclude = NULL)
nndata <- nndata %>% mutate_at(.vars = c('maker','interior','location','software'), .funs = factor,
level=unique(.),labels=1:length(unique(.)),exclude = NULL)
nndata <- nndata %>% mutate_at(.vars = c('maker','interior','location','software'), .funs = factor,
level=unique(.),labels=1:length(unique(~)),exclude = NULL)
?mutate_at
nndata <- nndata %>% mutate_at(.vars = c('maker','interior','location','software'),
.funs = factor(level=unique(.),labels=1:length(unique(.)),exclude = NULL))
nndata <- nndata %>% mutate_at(.vars = c('maker','interior','location','software'),
.funs = factor(level=unique(.vars),labels=1:length(unique(.vars)),exclude = NULL))
nndata <- subset(biddy, select=predictors) <- drop_na()
nndata <- subset(biddy, select=predictors) %>% drop_na()
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(biddy$interior),labels=1:length(unique(biddy$interior)),exclude = NULL)
nndata$location <- factor(nndata$location,level=unique(biddy$location),labels=1:length(unique(biddy$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(biddy$software),labels=1:length(unique(biddy$software)),exclude = NULL)
?shape
shape(nndata)
# \Set test and train data set
dim(nndata)
train.id <- sample.int(n, floor(n/2), replace = F)
set.seed(0)
train.id <- sample.int(n, floor(n/2), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(n/2), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- scale(train[names(train)!='winningbid'])
test.x <- scale(test[names(train)!='winningbid'])
glimpse(nndata)
nndata$caradphotos <- factor(nndata$caradphotos,level=unique(biddy$caradphotos),labels=unique(biddy$caradphotos),exclude = NULL)
glimpse(nndata)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=(unique(biddy$caradphotos),'NA'),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),'NA'),exclude = NULL)
glimpse(nndata)
summary(nndata$caradphotos)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),na),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NULL),exclude = NULL)
nndata <- subset(biddy, select=predictors) %>% drop_na()
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NULL),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NA),exclude = NULL)
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(biddy$interior),labels=1:length(unique(biddy$interior)),exclude = NULL)
nndata$location <- factor(nndata$location,level=unique(biddy$location),labels=1:length(unique(biddy$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(biddy$software),labels=1:length(unique(biddy$software)),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NA),exclude = NULL)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(n/2), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- scale(train[names(train)!='winningbid'])
test.x <- scale(test[names(train)!='winningbid'])
glimpse(nndata)
?scale
str(nndata)
level(nndata$maker)
levels(nndata$maker)
# The nndata is a full data set including potentially useful predictors
nndata %>% mutate_if(levels(.)==1,rm(.))
?mutate_if
# The nndata is a full data set including potentially useful predictors
levels(nndata)==1
?tapply(vector, index, function)
?tapply
# The nndata is a full data set including potentially useful predictors
lapply(nndata,levels)
# The nndata is a full data set including potentially useful predictors
lapply(nndata,length(levels))
# The nndata is a full data set including potentially useful predictors
lapply(nndata,length,levels)
# The nndata is a full data set including potentially useful predictors
lapply(nndata,levels)
# The nndata is a full data set including potentially useful predictors
str(lapply(nndata,levels))
# The nndata is a full data set including potentially useful predictors
str(lapply(nndata,levels))[2]
one_level <- c('ding_enormous','ding_seldom','ding_negligible','ding_detectable','ding_sizable','ding_vast',
'scratch_enormous','scratch_seldom')
predictors <- predictors[!predictors %in% useless_list]  # remove other useless variables
predictors <- predictors[!predictors %in% one_level]
nndata <- subset(biddy, select=predictors) %>% drop_na()
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(biddy$interior),labels=1:length(unique(biddy$interior)),exclude = NULL)
nndata$location <- factor(nndata$location,level=unique(biddy$location),labels=1:length(unique(biddy$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(biddy$software),labels=1:length(unique(biddy$software)),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NA),exclude = NULL)
# The nndata is a full data set including potentially useful predictors
nndata <- subset(nndata, select=predictors)
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(n/2), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- scale(train[names(train)!='winningbid'])
test.x <- scale(test[names(train)!='winningbid'])
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-c(2, 3, 11)] = scale(training_set[-c(2, 3, 11)])
test_set[-c(2, 3, 11)] = scale(test_set[-c(2, 3, 11)])
# Importing the dataset
dataset = read.csv('/Users/ellenyz/OneDrive - UW-Madison/Udemy Course/ML/Section 32 - Artificial Neural Networks (ANN)/Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
train.x <- lapply(train[names(train)!='winningbid'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='winningbid'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
classifier = h2o.deeplearning(y = 'winningbid',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64, 32, 16),
epochs = 100,
train_samples_per_iteration = -2)
rm(list = ls())
source('0. Data cleaning.R')
var <- colnames(orig_data)
orig_data$model <- factor(orig_data$model)
orig_data <- orig_data %>% group_by(model) %>% arrange(model)
# \Find the most frequently observed model
which.max(summary(orig_data$model))
## The most frequently observed one is:
id.top <- which.max(summary(orig_data$model))
unique(orig_data$model)[id.top] ## model 39 with 30258 obs
# \Generate Winning bid
biddy_list <- sprintf("biddy%d",1:22)  ## vector with formatted combination of text and variable values
my.max <- function(x){
ifelse(!all(is.na(x)), max(x, na.rm=T), NA)
}  ## set my own max function to avoid '-INF'
biddy <- orig_data %>% ungroup() %>%
select(biddy_list)
biddy <- biddy %>% mutate(winningbid=apply(biddy,1,FUN=my.max)) %>%
mutate(winningbid=na_if(winningbid,NA))
biddy <- orig_data %>% add_column(winningbid=biddy$winningbid)
biddy <- biddy[,!names(biddy) %in% biddy_list]
# \Gather predictors
predictors <- var[!var %in% biddy_list]  # remove biddy1~biddy22
time <- c("^biddate*","^bidhour*","^bidminute*","^bidsecond*")
time_list <- c()
for (i in time){
vec <- colnames(orig_data)[grepl(i,colnames(orig_data))]
time_list <- append(time_list,vec)
}
predictors <- predictors[!predictors %in% time_list]  # remove bid time variables
useless_list <- c('enddate','startdate',
'start_m','end_m','start_s','end_s','peak_s','season_trans')
one_level <- c('ding_enormous','ding_seldom','ding_negligible','ding_detectable','ding_sizable','ding_vast',
'scratch_enormous','scratch_seldom')
predictors <- predictors[!predictors %in% useless_list]  # remove other useless variables
predictors <- predictors[!predictors %in% one_level]
nndata <- subset(biddy, select=predictors) %>% drop_na()
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(biddy$interior),labels=1:length(unique(biddy$interior)),exclude = NULL)
nndata$location <- factor(nndata$location,level=unique(biddy$location),labels=1:length(unique(biddy$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(biddy$software),labels=1:length(unique(biddy$software)),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NA),exclude = NULL)
# The nndata is a full data set including potentially useful predictors
nndata <- subset(nndata, select=predictors)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(n/2), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- lapply(train[names(train)!='winningbid'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='winningbid'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'winningbid',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64, 32, 16),
epochs = 100,
train_samples_per_iteration = -2)
train <- nndata[train.id,]
test <- nndata[-train.id,]
# \Gather predictors
predictors <- var[!var %in% biddy_list]  # remove biddy1~biddy22
predictors <- predictors[!predictors %in% time_list]  # remove bid time variables
useless_list <- c('enddate','startdate',
'start_m','end_m','start_s','end_s','peak_s','season_trans')
one_level <- c('ding_enormous','ding_seldom','ding_negligible','ding_detectable','ding_sizable','ding_vast',
'scratch_enormous','scratch_seldom')
predictors <- predictors[!predictors %in% useless_list]  # remove other useless variables
predictors <- predictors[!predictors %in% one_level]
predictors
'winningbid' %in% predictors
winningbid' %in% var
'winningbid' %in% var
predictors <- c(predictors,'winningbid')
nndata <- subset(biddy, select=predictors) %>% drop_na()
nndata$maker <- factor(nndata$maker,level=unique(biddy$maker),labels=1:length(unique(biddy$maker)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(biddy$interior),labels=1:length(unique(biddy$interior)),exclude = NULL)
nndata$location <- factor(nndata$location,level=unique(biddy$location),labels=1:length(unique(biddy$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(biddy$software),labels=1:length(unique(biddy$software)),exclude = NULL)
nndata$caradphotos <- factor(nndata$caradphotos,level=c(unique(biddy$caradphotos),''),labels=c(unique(biddy$caradphotos),NA),exclude = NULL)
nndata <- subset(nndata, select=predictors)
nndata <- subset(nndata, select=predictors) %>% drop_na()
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(n/2), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- lapply(train[names(train)!='winningbid'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='winningbid'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'winningbid',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64, 32, 16),
epochs = 100,
train_samples_per_iteration = -2)
classifier = h2o.deeplearning(y = 'winningbid',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(32, 16),
epochs = 100,
train_samples_per_iteration = -2)
