train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0.5)
summary(nndata$software)
nndata$software <- fifelse(nndata$software==4,NA,nndata$software)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:(length(unique(nndata$software))-1),exclude = NULL)
#--------------------------------------
nndata <- data.frame(readRDS("../files for project/cleaned_data"))
nndata$sold <- 0
nndata$sold[which(df2$numbids > 0)] <- 1
nndata <- nndata[c(var,'sold')]
#nndata$maker <- factor(nndata$maker,level=unique(nndata$maker),labels=1:length(unique(nndata$maker)),exclude = NULL)
#nndata$model<- factor(nndata$model,level=unique(nndata$model),labels=1:length(unique(nndata$model)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(nndata$interior),labels=1:length(unique(nndata$interior)),exclude = NULL)
nndata$exterior <- factor(nndata$exterior,level=unique(nndata$exterior),labels=1:length(unique(nndata$exterior)),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:(length(unique(nndata$software))-1),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:3,exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=(unique(nndata$software)-1),labels=1:3,exclude = NULL)
unique(nndata$software)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=,labels=c(1,2,3,NA),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=c(1,2,3,NA),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=c(1,2,3,4,NA),exclude = NULL)
nndata$reserve <- factor(nndata$reserve)
nndata$sold <- factor(nndata$sold)
nndata$buyitnow <- factor(nndata$buyitnow)
nndata <- na.omit(nndata)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
summary(nndata$software)
#--------------------------------------
nndata <- data.frame(readRDS("../files for project/cleaned_data"))
nndata$sold <- 0
nndata$sold[which(df2$numbids > 0)] <- 1
nndata <- nndata[c(var,'sold')]
#nndata$maker <- factor(nndata$maker,level=unique(nndata$maker),labels=1:length(unique(nndata$maker)),exclude = NULL)
#nndata$model<- factor(nndata$model,level=unique(nndata$model),labels=1:length(unique(nndata$model)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(nndata$interior),labels=1:length(unique(nndata$interior)),exclude = NULL)
nndata$exterior <- factor(nndata$exterior,level=unique(nndata$exterior),labels=1:length(unique(nndata$exterior)),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:length(unique(nndata$software)),exclude = NULL)
nndata$reserve <- factor(nndata$reserve)
nndata$sold <- factor(nndata$sold)
nndata$buyitnow <- factor(nndata$buyitnow)
nndata <- na.omit(nndata)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
summary(nndata$software)
drop(test$software==1)
test$software==1
drop(test$software==2)
drop(test.x$software==1)
drop(test.x$software==2)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
drop(test.x$software==1)
drop(test.x$software==2)
drop(test$software==1)
drop(test$software==2)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
test.x <- test.x[which(test.x$software==1),]
test.x <- test.x[which(test.x$software=='1'),]
test.x <- test.x[which(!test.x$software=='1'),]
test.x <- test.x[which(!test.x$software==1),]
test.x <- test.x[-which(test.x$software==1),]
test.x <- lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- test.x[-which(test.x$software==1),]
View(test.x)
test.x <- test.x[-which(test.x$software==1)]
test <- test[-which(test.x$software==1)]
test.x <- test.x[-which(test.x$software==2)]
test <- test[-which(test.x$software==2)]
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
test.x <- test.x[-which(test.x$software==1)]
test <- test[-which(test.x$software==1)]
test.x <- test.x[-which(test.x$software==2)]
test <- test[-which(test.x$software==2)]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
test <- nndata[-train.id,]
test <- test[-which(test.x$software==1),]
test.x <- lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
test.x <- test.x[-which(test.x$software==1),]
test.x <- test.x[-which(test.x$software==2)]
test <- test[-which(test.x$software==2),]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame((lapply(test[names(test)!='sold'],
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
test.x <- test.x[-which(test.x$software==1),]
test <- test[-which(test.x$software==1),]
test.x <- test.x[-which(test.x$software==2)]
test <- test[-which(test.x$software==2),]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
prob_pred = h2o.predict(classifier, newdata = as.h2o(test))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- test.x[-which(test.x$software==1),]
test <- test[-which(test$software==1),]
test.x <- test.x[-which(test.x$software==2)]
test <- test[-which(test$software==2),]
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- test.x[which(!test.x$software==1),]
test <- test[which(!test$software==1),]
test.x <- test.x[which(!test.x$software==2)]
test <- test[which(!test$software==2),]
test.x <- test.x[which(!test.x$software==2),]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
test.x <- test.x[which(!test.x$software==1),]
test <- test[which(!test$software==1),]
test.x <- test.x[which(!test.x$software==2),]
test <- test[which(!test$software==2),]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0.5)
View(y_pred)
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
nn_mse <- h2o.mse(classifier)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- test.x[which(test.x$software!=1),]
test <- test[which(!test$software!=1),]
test.x <- test.x[which(!test.x$software!=2),]
test <- test[which(!test$software!=2),]
View(test.x)
test.x <- test.x[which(test.x$software!='1'),]
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- test.x[which(test.x$software!='1'),]
View(test.x)
test <- test[which(!test$software!='1'),]
test.x <- test.x[which(!test.x$software!='2'),]
test <- test[which(!test$software!='2'),]
summary(test.x$software)
summary(nndata$software)
nndata <- nndata[which(nndata$software!=1 & nndata$software!=2),]
summary(nndata$software)
#--------------------------------------
nndata <- data.frame(readRDS("../files for project/cleaned_data"))
nndata$sold <- 0
nndata$sold[which(df2$numbids > 0)] <- 1
nndata <- nndata[c(var,'sold')]
#nndata$maker <- factor(nndata$maker,level=unique(nndata$maker),labels=1:length(unique(nndata$maker)),exclude = NULL)
#nndata$model<- factor(nndata$model,level=unique(nndata$model),labels=1:length(unique(nndata$model)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(nndata$interior),labels=1:length(unique(nndata$interior)),exclude = NULL)
nndata$exterior <- factor(nndata$exterior,level=unique(nndata$exterior),labels=1:length(unique(nndata$exterior)),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:length(unique(nndata$software)),exclude = NULL)
nndata <- nndata[which(nndata$software!=1 & nndata$software!=2),]
nndata$reserve <- factor(nndata$reserve)
nndata$sold <- factor(nndata$sold)
nndata$buyitnow <- factor(nndata$buyitnow)
nndata <- na.omit(nndata)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
prob_pred = h2o.predict(classifier, newdata = as.h2o(test))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0)
y_pred = as.vector(y_pred)
y_pred
summary(y_pred)
nndata <- as.numeric(nndata)
#--------------------------------------
nndata <- data.frame(readRDS("../files for project/cleaned_data"))
nndata$sold <- 0
nndata$sold[which(df2$numbids > 0)] <- 1
nndata <- nndata[c(var,'sold')]
#nndata$maker <- factor(nndata$maker,level=unique(nndata$maker),labels=1:length(unique(nndata$maker)),exclude = NULL)
#nndata$model<- factor(nndata$model,level=unique(nndata$model),labels=1:length(unique(nndata$model)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(nndata$interior),labels=1:length(unique(nndata$interior)),exclude = NULL)
nndata$exterior <- factor(nndata$exterior,level=unique(nndata$exterior),labels=1:length(unique(nndata$exterior)),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:length(unique(nndata$software)),exclude = NULL)
nndata <- as.numeric(nndata)
nndata <- na.omit(nndata)
#--------------------------------------
nndata <- data.frame(readRDS("../files for project/cleaned_data"))
nndata$sold <- 0
nndata$sold[which(df2$numbids > 0)] <- 1
nndata <- nndata[c(var,'sold')]
#nndata$maker <- factor(nndata$maker,level=unique(nndata$maker),labels=1:length(unique(nndata$maker)),exclude = NULL)
#nndata$model<- factor(nndata$model,level=unique(nndata$model),labels=1:length(unique(nndata$model)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(nndata$interior),labels=1:length(unique(nndata$interior)),exclude = NULL)
nndata$exterior <- factor(nndata$exterior,level=unique(nndata$exterior),labels=1:length(unique(nndata$exterior)),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:length(unique(nndata$software)),exclude = NULL)
nndata <- data.frame(lapply(nndata,as.numeric))
nndata <- na.omit(nndata)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
summary(y_pred)
#--------------------------------------
nndata <- data.frame(readRDS("../files for project/cleaned_data"))
nndata$sold <- 0
nndata$sold[which(nndata$numbids > 0)] <- 1
nndata <- nndata[c(var,'sold')]
#nndata$maker <- factor(nndata$maker,level=unique(nndata$maker),labels=1:length(unique(nndata$maker)),exclude = NULL)
#nndata$model<- factor(nndata$model,level=unique(nndata$model),labels=1:length(unique(nndata$model)),exclude = NULL)
nndata$interior <- factor(nndata$interior,level=unique(nndata$interior),labels=1:length(unique(nndata$interior)),exclude = NULL)
nndata$exterior <- factor(nndata$exterior,level=unique(nndata$exterior),labels=1:length(unique(nndata$exterior)),exclude = NULL)
#nndata$location <- factor(nndata$location,level=unique(nndata$location),labels=1:length(unique(nndata$location)),exclude = NULL)
nndata$software <- factor(nndata$software,level=unique(nndata$software),labels=1:length(unique(nndata$software)),exclude = NULL)
nndata <- data.frame(lapply(nndata,as.numeric))
nndata <- na.omit(nndata)
# \Set test and train data set
n <- dim(nndata[1])
set.seed(0)
train.id <- sample.int(n, floor(0.8*n), replace = F)
train <- nndata[train.id,]
test <- nndata[-train.id,]
train.x <- data.frame(lapply(train[names(train)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
test.x <- data.frame(lapply(test[names(test)!='sold'],
function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x))
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'sold',
training_frame = as.h2o(train),
validation_frame = as.h2o(test),
activation = 'Rectifier',
hidden = c(64,32,16),
epochs = 100)
nn_mse <- h2o.mse(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test.x))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
summary(y_pred)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
summary(y_pred)
y_pred = (prob_pred >= 0.5)
y_pred = as.vector(y_pred)
y_pred
View(test)
check <- fifelse(y_pred==test$sold,1,0)
mean(check)
View(data)
